//
//  PrefixHeader.pch
//  RChat
//
//  Created by eims on 2018/9/4.
//  Copyright © 2018年 RPK. All rights reserved.
//

#ifndef PrefixHeader_pch
#define PrefixHeader_pch

#import <UIKit/UIKit.h>
#import "ColorTools.h"
#import <Foundation/Foundation.h>
#import <MJRefresh.h>
#import "UIView+SDAutoLayout.h"                             // SDAutoLayout
#import "UITableView+SDAutoTableViewCellHeight.h"           // SDAutoLayout
#import <SDWebImage/UIImageView+WebCache.h>
#import <SDWebImageManager.h>
#import <SVProgressHUD.h>

#import "UIView+KExtension.h"

#import "KAppDefaultUtil.h"


// 对于block的弱引用
#define kWeakSelf           __weak __typeof(self)weakSelf = self;

#define MSWIDTH  [UIScreen mainScreen].bounds.size.width
#define MSHEIGHT [UIScreen mainScreen].bounds.size.height

#define KXINIUID                [[KAppDefaultUtil sharedInstance] getXiniuID]

#define kDefaultHeadPortrait     [UIImage imageWithContentsOfFile:[[NSBundle mainBundle] pathForResource:@"logo@3x" ofType:@"png"]]

// 获取tmp目录路径
#define kTmpDir      NSTemporaryDirectory()
// 获取Documents目录路径
#define kDocDir      [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) firstObject]

// 判断是否iPhone X
#define IS_iPhoneX ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(1125, 2436), [[UIScreen mainScreen] currentMode].size) : NO)

// 临时附件路径
#define KAttachmentTempPath     [kTmpDir stringByAppendingPathComponent:@"tempAttach"]

// 是否刷新消息列表
#define KIsRefreshMessageView   [[NSUserDefaults standardUserDefaults] boolForKey:@"isRefreshMessageView"]

// Navigation bar height.
#define  kNavigationBarHeight               44.f
// status bar height.
#define  kStatusBarHeight                   (IS_iPhoneX ? 44.f : 20.f)
// Tabbar height.
#define  kTabbarHeight                      (IS_iPhoneX ? 83.f : 49.f)
// Tabbar safe bottom margin.
#define  kTabbarSafeBottomMargin            (IS_iPhoneX ? 34.f : 0.f)
// Status bar & navigation bar height.
#define  kStatusBarAndNavigationBarHeight   (IS_iPhoneX ? 88.f : 64.f)

// 字体大小
static const CGFloat KSystemFontOfSize16     = 16;
static const CGFloat KSystemFontOfSize14     = 14;
static const CGFloat KSystemFontOfSize13     = 13;
static const CGFloat KSystemFontOfSize12     = 12;
static const CGFloat KSystemFontOfSize10     = 10;
static const CGFloat KBoldSystemFontOfSize16 = 16;
static const CGFloat KBoldSystemFontOfSize14 = 14;
static const CGFloat KBoldSystemFontOfSize13 = 12;

#pragma mark - 消息输入框
// 输入框字体颜色
#define INPUT_BOX_TEXTCOLOR [UIColor darkGrayColor]
// 输入字体大小
#define INPUT_BOX_TEXT_FONT 15
// 输入框最大高度
#define INPUT_BOX_TEXT_MAX_HEIGHT 104
// 输入文本框的默认高度
#define INPUT_BOX_TEXT_MIN_HEIGHT 34
// 输入框高度
#define INPUT_BOX_HEIGHT 49
// 输入框与父视图的间隔
#define INPUT_BOX_BACKGROUND_SPACE 8
// 输入框-键盘按钮图片
#define INPUT_BOX_KEYBOARD_IMAGE [UIImage imageNamed:@"icon_message_keyboard"]
// 输入框-语音按钮图片
#define INPUT_BOX_VOICE_IMAGE [UIImage imageNamed:@"icon_message_voiceBtn"]
// 输入框-表情按钮图片
#define INPUT_BOX_FACE_IMAGE [UIImage imageNamed:@"icon_message_expression"]
// 输入框-更多按钮图片
#define INPUT_BOX_MORE_IMAGE [UIImage imageNamed:@"icon_message_more"]
// 表情框高度
#define INPUT_BOX_EMOJI_VIEW_HEIGHT 215
// 表情页高度 (INPUT_BOX_EMOJI_VIEW_HEIGHT - EMOJI_ITEM_HEIGHT(表情菜单高度) - 15(pageCtrl高度))
#define INPUT_BOX_EMOJI_HEIGHT 141
// item宽度
static const CGFloat ITEM_WIDTH = 40;
// item高度
static const CGFloat ITEM_HEIGHT = 40;
// 常规表情一行能显示的个数
#define NORMARL_EMOJI_ROW_COUNT MSWIDTH >= 375 ? 8 : 7

static const CGFloat krowSpacing = 5;

#define kcolumnSpacing ((MSWIDTH - (NORMARL_EMOJI_ROW_COUNT * ITEM_WIDTH))/(NORMARL_EMOJI_ROW_COUNT + 1))
// 菜单表情高度
static const CGFloat  MENU_EMOJI_ITEM_HEIGHT = 44;

// 动画表情一行能显示的个数
static const CGFloat GIF_EMOJI_ROW_COUNT = 4;
// 底部间隔
#define BOTTOM_SPACE kTabbarHeight - 49
// 表情间的间隔
static const CGFloat EMOJI_SPACE = 2;

#pragma mark - 输入框更多页面
// 输入框更多视图高度
#define INPUT_BOX_MORE_VIEW_HEIGHT 215
// item之间的横线间隔
#define INPUT_BOX_MORE_ITEM_H_INTERVAL 15
// item的宽度
#define INPUT_BOX_MORE_ITEM_WIDTH 60

// item之间的纵向间隔
#define INPUT_BOX_MORE_ITEM_V_INTERVAL (MSWIDTH - 4 * INPUT_BOX_MORE_ITEM_WIDTH)/5.f

#define INPUT_BOX_MORE_ITEM_HEIGHT (INPUT_BOX_MORE_VIEW_HEIGHT - 10 - 2 * INPUT_BOX_MORE_ITEM_H_INTERVAL) / 2.f

#pragma mark - 聊天页面
// 行间距
#define LINESPACE 1.225
// 头像宽度
#define AVATAR_WIDTH 40
// 头像与屏幕之间的间隔
#define AVATAR_SCREEN_SPACE 10
// 头像与用户名之间的间隔
#define AVATAR_USERNAME_SPACE 10
// 消息与背景框的间距（左右）
#define MESSAGE_BACKGROUND_SPACE 10
// 最大空余间隔
#define MESSAGE_MAX_FREE_SPACE 70
// 用户名高度（18）+ 间隔（2）
#define USERNAME_HEIGHT 18
// 用户名字体大小
#define USERNAME_FONT 15
// 聊天文本字体大小
#define CHAT_MESSAGE_FONT 16
// 邮件中详情字体大小
#define MAIL_DETAIL_FONT 14
// 邮件中邮件标题能出现的最大高度
#define MAIL_TITLE_MAX_HEIGHT 160
// 邮件消息最大行高 = 10 + 10 + 最顶部的16 + 4 + mailTitle高度（最大高度165） + 4 + mailDetail高度（最小高度20） + 5 + 附件高度(32) + 5 +底部高度（40） + 10 + 10
// 收到邮件是的最大高度
// 修改此高度可以到达修改默认邮件详情的效果
#define RECEIVE_MAIL_MAX_ROW_HEIGHT 324
// 由于自己发的邮件没有“回复”、“回复全部”和“转发”
#define SENDER_MAIL_MAX_ROW_HEIGHT 291
// 邮件附件高度
#define MAIL_ATTACHMENT_HEIGHT 25
// 自己发的邮件是否显示“回复”、“回复全部”和“转发”  默认不显示
#define SELF_SENDER_MAIL_SHOW_REPLY NO
// 消息页面昵称字体大小
#define MESSAGE_NICKNAME_FONT 14
// 显示消息时间时的新增高度
#define SHOW_MESSAGE_TIME_HEIGHT 30

// 用户名字体颜色
#define USERNAME_TEXTCOLOR           [UIColor darkGrayColor]
// 聊天文本字体颜色
#define CHAT_MESSAGE_TEXTCOLOR       [UIColor darkGrayColor]
// 邮件标题颜色
#define MAIL_TITLE_TEXTCOLOR         [ColorTools colorWithHexString:@"0x444444"]
// 邮件详情颜色
#define MAIL_DETAIL_TEXTCOLOR        [UIColor lightGrayColor]
// 自己发送的详情颜色
#define MAIL_DETAIL_TEXTCOLOR_SENDER [ColorTools colorWithHexString:@"0x666666"]

// 消息框最大宽度
#define MESSAGE_MAX_WIDTH            (MSWIDTH - (AVATAR_SCREEN_SPACE + AVATAR_WIDTH + AVATAR_USERNAME_SPACE) - MESSAGE_MAX_FREE_SPACE)
// 图片最大高度
#define IMAGE_MAX_HEIGHT             (MSHEIGHT - kStatusBarAndNavigationBarHeight - kTabbarHeight - 100)
// 最大的语音长度
#define MAX_VOICE_LENGTH             60 * 1000.f

#pragma mark - 输入框枚举
typedef NS_OPTIONS(NSUInteger, KInputStatus) {
    KInputStatusNone = 0,          // 无状态
    KInputStatusEmoji,             // 表情
    KInputStatusText,              // 文字
};

typedef NS_OPTIONS(NSUInteger, KInputBoxStatus) {
    KInputBoxStatusNone = 0,        // 无状态
    KInputBoxStatusShowVoice,       // 语音
    KInputBoxStatusShowEmoji,       // 表情
    KInputBoxStatusShowMore,        // 更多
    KInputBoxStatusShowKeyboard,    // 键盘
};

typedef NS_OPTIONS(NSUInteger, KEmojiType) {
    KEmojiTypeNomarl = 0,   // 正常表情
    KEmojiTypeGIF           // 动画
};

typedef NS_OPTIONS(NSUInteger, KGlideDirectionTpye) {
    // 没有滑动，用于第一次显示表情组
    KGlideDirectionTpyeNone = 0,
    // 从左往右滑，目的页面是左页
    KGlideDirectionTpyeLeft,
    // 从右往左滑，目的页面是右页
    KGlideDirectionTpyeRight
};

typedef NS_OPTIONS(NSUInteger, KInputBoxRecordStatus) {
    KInputBoxRecordStatusNone = 0,           // 初始状态
    KInputBoxRecordStatusRecording,          // 正在录音
    KInputBoxRecordStatusMoveOutside,        // 移出
    KInputBoxRecordStatusMoveInside,         // 移进
    KInputBoxRecordStatusCancel,             // 上滑取消录音
    KInputBoxRecordStatusEnd,                // 录音结束
    KInputBoxRecordStatusTooShort            // 录音太短
};

#pragma mark - 消息部分常量定义
static NSString *const kConversationCommonNot = @"conversationCommonNot";

#pragma mark - 消息枚举
typedef NS_OPTIONS(NSInteger, KConversationCommonNotification) {
    KConversationCommonNotificationMail,              // 接收到邮件
    KConversationCommonNotificationUpdateBedgeNumber, // 更新选中行的未读消息数
    KConversationCommonNotificationReceiveMessage,    // 收到消息
    KConversationCommonNotificationNetworkConnectionStatus, // 网络连接状态
    KConversationCommonNotificationNetworkStatus,     // 网络状态
    KConversationCommonNotificationEnterForeground    // 从后台进入前台
};

/*
 消息类型
 */
typedef NS_OPTIONS(NSInteger, KMessageType) {
    KMessageTypeNone = -1,   // 头部云邮 或 其他
    KMessageTypeText = 0,    // 文字消息  包含表情
    KMessageTypeVoice,       // 语音消息
    KMessageTypeImage,       // 图片消息
    KMessageTypeMail,        // 邮件消息
    KMessageTypeVideo,       // 视频消息
    KMessageTypeFile,        // 文件消息
    KMessageTypeLocation,    // 位置消息
    KMessageTypeCard         // 名片消息
};

/*
 消息发送方
 */
typedef NS_OPTIONS(NSUInteger, KMessageSenderType) {
    KMessageSenderTypeSender = 0,    // 发送方
    KMessageSenderTypeReceiver       // 接收方
};

/*
 消息发送状态
 */
typedef NS_OPTIONS(NSUInteger, KMessageSendStatus) {
    KMessageSendStatusSendSuccess = 0,        // 发送成功
    KMessageSendStatusSendFailure,            // 发送失败
    KMessageSendStatusSending                 // 正在发送
};

/*
 消息接收状态
 */
typedef NS_OPTIONS(NSUInteger, KMessageReadStatus) {
    KMessageReadStatusRead = 0,  // 消息已读
    KMessageReadStatusUnRead     // 消息未读
};

/**
 聊天室
 */
typedef NS_OPTIONS(NSInteger, KMessageChatType) {
    KMessageChatTypeSingle = 0,  // 单聊
    KMessageChatTypeGroup,       // 群聊
    KMessageChatTypeFTP,         // 文件传输
    KMessageChatTypeVisitor      // 游客
};

typedef NS_OPTIONS(NSUInteger, KInputBoxMoreStatus) {
    KInputBoxMoreStatusNone = 0,   // 无
    KInputBoxMoreStatusPhoto,      // 相册选择照片
    KInputBoxMoreStatusTakePhoto,  // 拍摄
    KInputBoxMoreStatusMail,       // 云邮
    KInputBoxMoreStatusCallPhone,  // 拨打电话
    KInputBoxMoreStatusVideo,      // 视频通话
    KInputBoxMoreStatusCard,       // 个人名片
    KInputBoxMoreStatusLocation,   // 位置
    KInputBoxMoreStatusFile        // 文件
};


#endif /* PrefixHeader_pch */
